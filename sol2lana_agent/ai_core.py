# sol2lana_agent/ai_core.py

class AICore:
    def __init__(self):
        print("üí° C√©rebro do Agente (AI Core) online.")

    def decide_next_action(self, objective: str, state: object):
        """
        Analisa o objetivo e o estado atual para decidir a pr√≥xima a√ß√£o.
        Este √© o cora√ß√£o do racioc√≠nio do agente.
        """
        print("\nü§î C√âREBRO PENSANDO...")
        print(f"   - Objetivo Atual: '{objective}'")

        # --- L√ìGICA DE RACIOC√çNIO (ReAct) ---
        # Eu, Sol, aplicaria esta l√≥gica para decidir o que fazer.

        # Se o objetivo √© operar e n√£o h√° oportunidades na mem√≥ria, a primeira a√ß√£o √© procurar.
        if "operar o mercado" in objective and not state.opportunities:
            print("   - Racioc√≠nio: Objetivo √© operar, mas n√£o tenho alvos. A√ß√£o: escanear o mercado.")
            return {"tool": "find_opportunities", "parameters": {}}

        # Se j√° temos alvos, mas n√£o temos um plano, a pr√≥xima a√ß√£o √© analisar.
        if state.opportunities and not state.deployment_plan:
             print("   - Racioc√≠nio: Tenho alvos, preciso de um plano de aloca√ß√£o. A√ß√£o: analisar bins.")
             # CHECK THIS HERE HUMAN FOOL
             # Em um sistema real, passar√≠amos o endere√ßo do alvo principal aqui.
             return {"tool": "analyze_dlmm_bins", "parameters": {"pair_address": "..."}}

        # Se o objetivo √© relatar, a a√ß√£o √© gerar o relat√≥rio.
        if "gerar relat√≥rio" in objective:
            print("   - Racioc√≠nio: Recebi ordem para relatar. A√ß√£o: gerar relat√≥rio.")
            return {"tool": "generate_report", "parameters": {}}

        # Se nenhuma a√ß√£o for necess√°ria, aguarde.
        print("   - Racioc√≠nio: Nenhuma a√ß√£o imediata necess√°ria para o objetivo atual. Aguardando.")
        return {"tool": "wait", "parameters": {"duration_seconds": 60}}
